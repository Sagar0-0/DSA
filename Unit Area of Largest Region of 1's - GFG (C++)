class Solution{

  public:
      int solve(vector<vector<int>>& grid, int i, int j){
          if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j] == 0) return 0; 

          vector<int> ind_i = {-1,-1,-1,0,0,1,1,1};   //to traverse all direction
          vector<int> ind_j = {-1,0,1,-1,1,-1,0,1};

          int ans=0;
          grid[i][j] = 0;                            // reseting visited value to 0
          for(int k=0; k<8;k++){
              ans += solve(grid,i+ind_i[k],j+ind_j[k]);        // adding area of all direction(except curr pos. which we add later)
          }

          ans += 1;              // adding one for where we stand right now
          return ans;
      }

      //Function to find unit area of the largest region of 1s.
      int findMaxArea(vector<vector<int>>& grid) {
          // Code here
          
          int ans =0;
          for(int i=0; i<grid.size();i++){                ///traversing through all elem       // T.C. O(n^2)
              for(int j=0; j<grid[0].size();j++){
                  int temp = solve(grid,i,j);
                  ans = max(ans,temp);
              }
          }

          return ans;
      }
   }
