class Solution{
    static List<Integer> nextPermutation(int N, int a[]){
        // code here
        int k=-1;
        for(int i=0;i<N-1;i++){
            if(a[i]<a[i+1]){
                k=i;
            }
        }
        if(k==-1){
            List<Integer> list=new ArrayList<>();
            for(int i=N-1;i>=0;i--){
                list.add(a[i]);
            }
            return list;
        }
        int l=k+1;
        for(int i=k+1;i<N;i++){
            if(a[i]>a[k]){
                l=i;
            }
        }
        int temp=a[k];
        a[k]=a[l];
        a[l]=temp;
        List<Integer> list=new ArrayList<>();
        for(int i=0;i<=k;i++){
            list.add(a[i]);
        }
        for(int i=N-1;i>k;i--){
            list.add(a[i]);
        }
        return list;
        
    }
}

//=============================================================
public class Solution {
    public ArrayList<Integer> nextPermutation(ArrayList<Integer> a) {
        // code here
        int k=-1;
        int N=a.size();
        for(int i=0;i<N-1;i++){
            if(a.get(i)<a.get(i+1)){
                k=i;
            }
        }
        if(k==-1){
            ArrayList<Integer> list=new ArrayList<>();
            for(int i=N-1;i>=0;i--){
                list.add(a.get(i));
            }
            return list;
        }
        
        int l=k+1;
        
        for(int i=k+1;i<N;i++){
            if(a.get(i)>a.get(k)){
                l=i;
            }
        }
        
        int temp=a.get(k);
        a.set(k,a.get(l));
        a.set(l,temp);
        ArrayList<Integer> list=new ArrayList<>();
        for(int i=0;i<=k;i++){
            list.add(a.get(i));
        }
        for(int i=N-1;i>k;i--){
            list.add(a.get(i));
        }
        return list;
    }
}
